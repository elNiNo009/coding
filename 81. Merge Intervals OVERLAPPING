/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
 bool mycomp(Interval a, Interval b) 
{  
    return a.start > b.start; 
    
} 
 bool mycom(Interval a, Interval b) 
{  
    return a.start < b.start; 
    
} 
vector<Interval> Solution::merge(vector<Interval> &A)
{
    sort(A.begin(),A.end(),mycomp);
    int index=0;
    for(int i=0;i<A.size();i++)
    {
        if(index!=0 && A[index-1].start<=A[i].end)
         {
              while(index!=0 && A[index-1].start<=A[i].end )
               {
                   A[index-1].end=max(A[index-1].end,A[i].end);
                   A[index-1].start=min(A[index-1].start,A[i].start);
                   index--;
               }
         }
         else
         {
             A[index]=A[i];
         }
         index++;
    }
    
    A.erase(A.begin()+index,A.end());
    sort(A.begin(),A.end(),mycom);
    return A;
  
}
